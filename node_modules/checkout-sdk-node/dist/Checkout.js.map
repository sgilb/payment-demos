{"version":3,"sources":["../src/Checkout.js"],"names":["determineHost","key","options","host","LIVE_SECRET_KEY_REGEX","test","LIVE_BASE_URL","SANDBOX_BASE_URL","determineSecretKey","process","env","CKO_SECRET_KEY","determinePublicKey","pk","CKO_PUBLIC_KEY","Checkout","config","sk","timeout","DEFAULT_TIMEOUT","payments","Payments","sources","Sources","tokens","Tokens"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD,EAAMC,OAAN,EAAkB;AACpC;AACA,MAAIA,OAAO,IAAIA,OAAO,CAACC,IAAvB,EAA6B;AACzB,WAAOD,OAAO,CAACC,IAAf;AACH;;AACD,SAAOC,8BAAsBC,IAAtB,CAA2BJ,GAA3B,IAAkCK,qBAAlC,GAAkDC,wBAAzD;AACH,CAND;;AAQA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAP,GAAG,EAAI;AAC9B;AACA,SAAO,CAACA,GAAD,GAAOQ,OAAO,CAACC,GAAR,CAAYC,cAAZ,IAA8B,EAArC,GAA0CV,GAAjD;AACH,CAHD;;AAKA,IAAMW,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAV,OAAO,EAAI;AAClC;AACA,MAAIA,OAAO,IAAIA,OAAO,CAACW,EAAvB,EAA2B;AACvB,WAAOX,OAAO,CAACW,EAAf;AACH;;AACD,SAAOJ,OAAO,CAACC,GAAR,CAAYI,cAAZ,IAA8B,EAArC;AACH,CAND;AAQA;;;;;;;;IAMqBC,Q;AACjB;;;;;;;;;;AAUA,kBAAYd,GAAZ,EAAiBC,OAAjB,EAA0B;AAAA;AACtB,OAAKc,MAAL,GAAc;AACVC,IAAAA,EAAE,EAAET,kBAAkB,CAACP,GAAD,CADZ;AAEVY,IAAAA,EAAE,EAAED,kBAAkB,CAACV,OAAD,CAFZ;AAGVC,IAAAA,IAAI,EAAEH,aAAa,CAACC,GAAD,EAAMC,OAAN,CAHT;AAIVgB,IAAAA,OAAO,EAAEhB,OAAO,IAAIA,OAAO,CAACgB,OAAnB,GAA6BhB,OAAO,CAACgB,OAArC,GAA+CC;AAJ9C,GAAd;AAOA,OAAKC,QAAL,GAAgB,IAAIC,eAAJ,CAAa,KAAKL,MAAlB,CAAhB;AACA,OAAKM,OAAL,GAAe,IAAIC,cAAJ,CAAY,KAAKP,MAAjB,CAAf;AACA,OAAKQ,MAAL,GAAc,IAAIC,aAAJ,CAAW,KAAKT,MAAhB,CAAd;AACH,C","sourcesContent":["import { DEFAULT_TIMEOUT, LIVE_BASE_URL, LIVE_SECRET_KEY_REGEX, SANDBOX_BASE_URL } from './config';\r\nimport { Payments, Sources, Tokens } from './index';\r\n\r\nconst determineHost = (key, options) => {\r\n    // Unless specified, determine the hosted based on the secret key\r\n    if (options && options.host) {\r\n        return options.host;\r\n    }\r\n    return LIVE_SECRET_KEY_REGEX.test(key) ? LIVE_BASE_URL : SANDBOX_BASE_URL;\r\n};\r\n\r\nconst determineSecretKey = key => {\r\n    // Unless specified, check environemnt variables for the key\r\n    return !key ? process.env.CKO_SECRET_KEY || '' : key;\r\n};\r\n\r\nconst determinePublicKey = options => {\r\n    // Unless specified, check environemnt variables for the key\r\n    if (options && options.pk) {\r\n        return options.pk;\r\n    }\r\n    return process.env.CKO_PUBLIC_KEY || '';\r\n};\r\n\r\n/**\r\n * Main Checkout.com SDK class\r\n *\r\n * @export\r\n * @class Checkout\r\n */\r\nexport default class Checkout {\r\n    /**\r\n     * Creates an instance of Checkout.com's SDK.\r\n     *\r\n     * Determines the environemnt based on the key\r\n     *\r\n     * @constructor\r\n     * @param {string} [key] Secret Key /^(sk)\r\n     * @param {Object}  [options] Cofiguration options\r\n     * @memberof Payments\r\n     */\r\n    constructor(key, options) {\r\n        this.config = {\r\n            sk: determineSecretKey(key),\r\n            pk: determinePublicKey(options),\r\n            host: determineHost(key, options),\r\n            timeout: options && options.timeout ? options.timeout : DEFAULT_TIMEOUT\r\n        };\r\n\r\n        this.payments = new Payments(this.config);\r\n        this.sources = new Sources(this.config);\r\n        this.tokens = new Tokens(this.config);\r\n    }\r\n}\r\n"],"file":"Checkout.js"}