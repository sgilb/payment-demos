{"version":3,"sources":["../../../src/api/sources/sources.js"],"names":["Sources","config","body","fetch","timeout","method","url","host","headers","Authorization","sk","response","json","error"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;IAMqBA,O;;;AACjB,mBAAYC,MAAZ,EAAoB;AAAA;AAChB,SAAKA,MAAL,GAAcA,MAAd;AACH;AAED;;;;;;;;;;;;;;;oDAQUC,I;;;;;;AACN,+CAAcA,IAAd;;;uBAE2B,sBACnBC,qBADmB,EAEnB;AAAEC,kBAAAA,OAAO,EAAE,KAAKH,MAAL,CAAYG;AAAvB,iBAFmB,EAGnB;AACIC,kBAAAA,MAAM,EAAE,MADZ;AAEIC,kBAAAA,GAAG,YAAK,KAAKL,MAAL,CAAYM,IAAjB,aAFP;AAGIC,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,aAAa,EAAE,KAAKR,MAAL,CAAYS;AAA7B,mBAHb;AAIIR,kBAAAA,IAAI,EAAJA;AAJJ,iBAHmB,C;;;AAAjBS,gBAAAA,Q;;uBAUOA,QAAQ,CAACC,I;;;;;;;;;uBAEF,wC;;;AAAdC,gBAAAA,K;sBACAA,K","sourcesContent":["import fetch from 'node-fetch';\r\nimport { determineError } from '../../services/errors';\r\nimport http from '../../services/http';\r\nimport { setSourceType } from '../../services/validation';\r\n\r\n/**\r\n * Class dealing with the /sources endpoint\r\n *\r\n * @export\r\n * @class Sources\r\n */\r\nexport default class Sources {\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n\r\n    /**\r\n     * Add a reusable payment source that can be used later to make one or more payments.\r\n     * Payment sources are linked to a specific customer and cannot be shared between customers.\r\n     *\r\n     * @memberof Sources\r\n     * @param {Object} body Source request body.\r\n     * @return {Promise<Object>} A promise to the add source response.\r\n     */\r\n    async add(body) {\r\n        setSourceType(body);\r\n        try {\r\n            const response = await http(\r\n                fetch,\r\n                { timeout: this.config.timeout },\r\n                {\r\n                    method: 'post',\r\n                    url: `${this.config.host}/sources`,\r\n                    headers: { Authorization: this.config.sk },\r\n                    body\r\n                }\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n"],"file":"sources.js"}