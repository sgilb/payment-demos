{"version":3,"sources":["../../../src/api/payments/payments.js"],"names":["actionHandler","config","action","paymentId","body","fetch","timeout","method","url","host","headers","Authorization","sk","undefined","response","json","getHandler","determineHeaders","idempotencyKey","addUtilityParams","requiresRedirect","destination","status","redirectLink","_links","redirect","href","Payments","error","id"],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle */\r\nimport fetch from 'node-fetch';\r\nimport { determineError } from '../../services/errors';\r\nimport http from '../../services/http';\r\nimport { validatePayment, setSourceOrDestinationType } from '../../services/validation';\r\n\r\nconst actionHandler = async (config, action, paymentId, body) => {\r\n    const response = await http(\r\n        fetch,\r\n        { timeout: config.timeout },\r\n        {\r\n            method: 'post',\r\n            url: `${config.host}/payments/${paymentId}/${action}`,\r\n            headers: {\r\n                Authorization: config.sk\r\n            },\r\n            body: body !== undefined ? body : {}\r\n        }\r\n    );\r\n    return response.json;\r\n};\r\n\r\nconst getHandler = async (config, url) => {\r\n    const response = await http(\r\n        fetch,\r\n        { timeout: config.timeout },\r\n        {\r\n            method: 'get',\r\n            url,\r\n            headers: {\r\n                Authorization: config.sk\r\n            }\r\n        }\r\n    );\r\n    return response;\r\n};\r\n\r\nconst determineHeaders = (config, idempotencyKey) => {\r\n    if (idempotencyKey !== undefined) {\r\n        return {\r\n            Authorization: config.sk,\r\n            'Cko-Idempotency-Key': idempotencyKey\r\n        };\r\n    }\r\n    return { Authorization: config.sk };\r\n};\r\n\r\nconst addUtilityParams = json => {\r\n    let requiresRedirect = false;\r\n\r\n    if (json.destination) {\r\n        requiresRedirect = false;\r\n    } else {\r\n        requiresRedirect = json.status === 'Pending';\r\n    }\r\n\r\n    // If the redirection URL exists add it to the response body as 'redirectLink'\r\n    let redirectLink;\r\n    if (requiresRedirect && json._links.redirect) {\r\n        redirectLink = json._links.redirect.href;\r\n    }\r\n    return {\r\n        ...json,\r\n        requiresRedirect,\r\n        redirectLink\r\n    };\r\n};\r\n\r\n/**\r\n * Class dealing with the /payments endpoint\r\n *\r\n * @export\r\n * @class Payments\r\n */\r\nexport default class Payments {\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n\r\n    /**\r\n     * Sends payment or a payout requests.\r\n     *\r\n     * @memberof Payments\r\n     * @param {Object} body Payment Request body.\r\n     * @param {string} [idempotencyKey] Idempotency Key.\r\n     * @return {Promise<Object>} A promise to payment response.\r\n     */\r\n    async request(body, idempotencyKey) {\r\n        try {\r\n            setSourceOrDestinationType(body);\r\n            validatePayment(body);\r\n\r\n            const response = await http(\r\n                fetch,\r\n                { timeout: this.config.timeout },\r\n                {\r\n                    method: 'post',\r\n                    url: `${this.config.host}/payments`,\r\n                    headers: determineHeaders(this.config, idempotencyKey),\r\n                    body\r\n                }\r\n            );\r\n            return addUtilityParams(await response.json);\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the details of the payment with the specified identifier string.\r\n     *\r\n     * @memberof Payments\r\n     * @param {string} id /^(pay|sid)_(\\w{26})$/ The payment or payment session identifier.\r\n     * @return {Promise<Object>} A promise to the get payment response.\r\n     */\r\n    async get(id) {\r\n        try {\r\n            const response = await getHandler(this.config, `${this.config.host}/payments/${id}`);\r\n            return response.json;\r\n        } catch (err) {\r\n            throw await determineError(err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns all the actions associated with a payment ordered by processing date in\r\n     * descending order (latest first).\r\n     *\r\n     * @memberof Payments\r\n     * @param {string} id /^(pay)_(\\w{26})$/ The payment identifier.\r\n     * @return {Promise<Object>} A promise to the getActions response.\r\n     */\r\n    async getActions(id) {\r\n        try {\r\n            const response = await getHandler(\r\n                this.config,\r\n                `${this.config.host}/payments/${id}/actions`\r\n            );\r\n            return response.json;\r\n        } catch (err) {\r\n            throw await determineError(err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Captures a payment if supported by the payment method.\r\n     *\r\n     * @memberof Payments\r\n     * @param {string} paymentId /^(pay)_(\\w{26})$/ The payment or payment session identifier.\r\n     * @param {Object} [body] Capture request body.\r\n     * @return {Promise<Object>} A promise to the capture response.\r\n     */\r\n    async capture(paymentId, body) {\r\n        try {\r\n            const response = await actionHandler(this.config, 'captures', paymentId, body);\r\n            return response;\r\n        } catch (err) {\r\n            throw await determineError(err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refunds a payment if supported by the payment method.\r\n     *\r\n     * @memberof Payments\r\n     * @param {string} id /^(pay)_(\\w{26})$/ The payment or payment session identifier.\r\n     * @param {Object} [body] Refund request body.\r\n     * @return {Promise<Object>} A promise to the refund response.\r\n     */\r\n    async refund(paymentId, body) {\r\n        try {\r\n            const response = await actionHandler(this.config, 'refunds', paymentId, body);\r\n            return response;\r\n        } catch (err) {\r\n            throw await determineError(err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Voids a payment if supported by the payment method.\r\n     *\r\n     * @memberof Payments\r\n     * @param {string} id /^(pay)_(\\w{26})$/ The payment or payment session identifier.\r\n     * @param {Object} [body] Void request body.\r\n     * @return {Promise<Object>} A promise to the void response.\r\n     */\r\n    async void(paymentId, body) {\r\n        try {\r\n            const response = await actionHandler(this.config, 'voids', paymentId, body);\r\n            return response;\r\n        } catch (err) {\r\n            throw await determineError(err);\r\n        }\r\n    }\r\n}\r\n"],"file":"payments.js"}