{"version":3,"sources":["../../src/services/validation.js"],"names":["validatePayment","request","amount","indexOf","ValueError","currency","CURRENCIES","payment_type","toLowerCase","PAYMENT_TYPES","source","type","reference","setSourceOrDestinationType","id","startsWith","destination","setTokenType","token_data","setSourceType","source_data"],"mappings":";;;;;;;AACA;;AACA;;AAFA;AAIO,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,OAAO,EAAI;AACtC,MAAIA,OAAO,CAACC,MAAR,IAAkB,CAAC,KAAKD,OAAO,CAACC,MAAd,EAAsBC,OAAtB,CAA8B,GAA9B,MAAuC,CAAC,CAA9D,EAAiE;AAC7D,UAAM,IAAIC,kBAAJ,CAAe,sCAAf,CAAN;AACH;;AACD,MAAI,EAAEH,OAAO,CAACI,QAAR,IAAoBC,kBAAtB,CAAJ,EAAuC;AACnC,UAAM,IAAIF,kBAAJ,CAAe,kCAAf,CAAN;AACH;;AAED,MAAIH,OAAO,CAACM,YAAR,IAAwB,EAAEN,OAAO,CAACM,YAAR,CAAqBC,WAArB,MAAsCC,qBAAxC,CAA5B,EAAoF;AAChF,UAAM,IAAIL,kBAAJ,CAAe,gCAAf,CAAN;AACH;;AAED,MAAIH,OAAO,CAACS,MAAR,IAAkBT,OAAO,CAACS,MAAR,CAAeC,IAAjC,IAAyC,EAAE,OAAOV,OAAO,CAACS,MAAR,CAAeC,IAAtB,KAA+B,QAAjC,CAA7C,EAAyF;AACrF,UAAM,IAAIP,kBAAJ,CAAe,uCAAf,CAAN;AACH;;AAED,MAAIH,OAAO,CAACW,SAAR,IAAqB,EAAE,OAAOX,OAAO,CAACW,SAAf,KAA6B,QAA/B,CAAzB,EAAmE;AAC/D,UAAM,IAAIR,kBAAJ,CAAe,qCAAf,CAAN;AACH;AACJ,CAnBM;;;;AAqBA,IAAMS,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAAZ,OAAO,EAAI;AACjD,MAAIA,OAAO,CAACS,MAAZ,EAAoB;AAChB,QAAIT,OAAO,CAACS,MAAR,CAAeC,IAAnB,EAAyB;AACrB,aAAOV,OAAP;AACH;;AACD,QAAI,YAAYA,OAAO,CAACS,MAAxB,EAAgC;AAC5BT,MAAAA,OAAO,CAACS,MAAR,CAAeC,IAAf,GAAsB,MAAtB;AACH,KAFD,MAEO,IACH,WAAWV,OAAO,CAACS,MAAnB,IACC,QAAQT,OAAO,CAACS,MAAhB,IAA0BT,OAAO,CAACS,MAAR,CAAeI,EAAf,CAAkBC,UAAlB,CAA6B,MAA7B,CAFxB,EAGL;AACEd,MAAAA,OAAO,CAACS,MAAR,CAAeC,IAAf,GAAsB,UAAtB;AACH,KALM,MAKA,IAAI,QAAQV,OAAO,CAACS,MAAhB,IAA0BT,OAAO,CAACS,MAAR,CAAeI,EAAf,CAAkBC,UAAlB,CAA6B,MAA7B,CAA9B,EAAoE;AACvEd,MAAAA,OAAO,CAACS,MAAR,CAAeC,IAAf,GAAsB,IAAtB;AACH,KAFM,MAEA,IAAI,WAAWV,OAAO,CAACS,MAAnB,IAA6B,EAAE,gBAAgBT,OAAO,CAACS,MAA1B,CAAjC,EAAoE;AACvET,MAAAA,OAAO,CAACS,MAAR,CAAeC,IAAf,GAAsB,OAAtB;AACH,KAFM,MAEA,IAAI,WAAWV,OAAO,CAACS,MAAnB,IAA6B,gBAAgBT,OAAO,CAACS,MAAzD,EAAiE;AACpET,MAAAA,OAAO,CAACS,MAAR,CAAeC,IAAf,GAAsB,eAAtB;AACH;AACJ,GAlBD,MAkBO,IAAIV,OAAO,CAACe,WAAZ,EAAyB;AAC5B,QAAIf,OAAO,CAACe,WAAR,CAAoBL,IAAxB,EAA8B;AAC1B,aAAOV,OAAP;AACH;;AACD,QAAI,YAAYA,OAAO,CAACe,WAAxB,EAAqC;AACjCf,MAAAA,OAAO,CAACe,WAAR,CAAoBL,IAApB,GAA2B,MAA3B;AACH,KAFD,MAEO,IAAI,WAAWV,OAAO,CAACe,WAAvB,EAAoC;AACvCf,MAAAA,OAAO,CAACe,WAAR,CAAoBL,IAApB,GAA2B,OAA3B;AACH,KAFM,MAEA,IAAI,QAAQV,OAAO,CAACe,WAApB,EAAiC;AACpCf,MAAAA,OAAO,CAACe,WAAR,CAAoBL,IAApB,GAA2B,IAA3B;AACH;AACJ;;AACD,SAAOV,OAAP;AACH,CAhCM;;;;AAkCA,IAAMgB,YAAY,GAAG,SAAfA,YAAe,CAAAhB,OAAO,EAAI;AACnC,MAAIA,OAAO,CAACU,IAAZ,EAAkB;AACd,WAAOV,OAAP;AACH;;AACD,MAAI,YAAYA,OAAhB,EAAyB;AACrBA,IAAAA,OAAO,CAACU,IAAR,GAAe,MAAf;AACH,GAFD,MAEO,IAAI,gBAAgBV,OAAhB,IAA2B,YAAYA,OAAO,CAACiB,UAAnD,EAA+D;AAClEjB,IAAAA,OAAO,CAACU,IAAR,GAAe,UAAf;AACH,GAFM,MAEA,IAAI,gBAAgBV,OAAhB,IAA2B,mBAAmBA,OAAO,CAACiB,UAA1D,EAAsE;AACzEjB,IAAAA,OAAO,CAACU,IAAR,GAAe,WAAf;AACH;;AACD,SAAOV,OAAP;AACH,CAZM;;;;AAcA,IAAMkB,aAAa,GAAG,SAAhBA,aAAgB,CAAAlB,OAAO,EAAI;AACpC,MAAIA,OAAO,CAACU,IAAZ,EAAkB;AACd,WAAOV,OAAP;AACH;;AACD,MAAI,iBAAiBA,OAAjB,IAA4B,kBAAkBA,OAAO,CAACmB,WAA1D,EAAuE;AACnEnB,IAAAA,OAAO,CAACU,IAAR,GAAe,KAAf;AACH,GAFD,MAEO,IAAI,iBAAiBV,OAAjB,IAA4B,kBAAkBA,OAAO,CAACmB,WAA1D,EAAuE;AAC1EnB,IAAAA,OAAO,CAACU,IAAR,GAAe,MAAf;AACH;;AACD,SAAOV,OAAP;AACH,CAVM","sourcesContent":["/* eslint-disable prefer-template */\r\nimport { ValueError } from './errors';\r\nimport { CURRENCIES, PAYMENT_TYPES } from '../config';\r\n\r\nexport const validatePayment = request => {\r\n    if (request.amount && ('' + request.amount).indexOf('.') !== -1) {\r\n        throw new ValueError('The amount can not contain decimals.');\r\n    }\r\n    if (!(request.currency in CURRENCIES)) {\r\n        throw new ValueError('The currency value is not valid.');\r\n    }\r\n\r\n    if (request.payment_type && !(request.payment_type.toLowerCase() in PAYMENT_TYPES)) {\r\n        throw new ValueError('The payment type is not valid.');\r\n    }\r\n\r\n    if (request.source && request.source.type && !(typeof request.source.type === 'string')) {\r\n        throw new ValueError('The source type needs to be a string.');\r\n    }\r\n\r\n    if (request.reference && !(typeof request.reference === 'string')) {\r\n        throw new ValueError('The reference needs to be a string.');\r\n    }\r\n};\r\n\r\nexport const setSourceOrDestinationType = request => {\r\n    if (request.source) {\r\n        if (request.source.type) {\r\n            return request;\r\n        }\r\n        if ('number' in request.source) {\r\n            request.source.type = 'card';\r\n        } else if (\r\n            'email' in request.source ||\r\n            ('id' in request.source && request.source.id.startsWith('cus_'))\r\n        ) {\r\n            request.source.type = 'customer';\r\n        } else if ('id' in request.source && request.source.id.startsWith('src_')) {\r\n            request.source.type = 'id';\r\n        } else if ('token' in request.source && !('cryptogram' in request.source)) {\r\n            request.source.type = 'token';\r\n        } else if ('token' in request.source && 'cryptogram' in request.source) {\r\n            request.source.type = 'network_token';\r\n        }\r\n    } else if (request.destination) {\r\n        if (request.destination.type) {\r\n            return request;\r\n        }\r\n        if ('number' in request.destination) {\r\n            request.destination.type = 'card';\r\n        } else if ('token' in request.destination) {\r\n            request.destination.type = 'token';\r\n        } else if ('id' in request.destination) {\r\n            request.destination.type = 'id';\r\n        }\r\n    }\r\n    return request;\r\n};\r\n\r\nexport const setTokenType = request => {\r\n    if (request.type) {\r\n        return request;\r\n    }\r\n    if ('number' in request) {\r\n        request.type = 'card';\r\n    } else if ('token_data' in request && 'header' in request.token_data) {\r\n        request.type = 'applepay';\r\n    } else if ('token_data' in request && 'signedMessage' in request.token_data) {\r\n        request.type = 'googlepay';\r\n    }\r\n    return request;\r\n};\r\n\r\nexport const setSourceType = request => {\r\n    if (request.type) {\r\n        return request;\r\n    }\r\n    if ('source_data' in request && 'account_type' in request.source_data) {\r\n        request.type = 'ach';\r\n    } else if ('source_data' in request && 'account_iban' in request.source_data) {\r\n        request.type = 'sepa';\r\n    }\r\n    return request;\r\n};\r\n"],"file":"validation.js"}