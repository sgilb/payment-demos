{"version":3,"sources":["../../src/services/http.js"],"names":["pjson","require","http","fetch","config","request","url","method","timeout","body","JSON","stringify","headers","pragma","version","response","bodyParser","rsp","text","then","parse","ok","json","status","data","REQUEST_ID_HEADER","raw","API_VERSION_HEADER"],"mappings":";;;;;;;;;;;;;;;AACA;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,oBAAD,CAArB;;AAEA,IAAMC,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG,iBAAOC,KAAP,EAAcC,MAAd,EAAsBC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcF,KAAK,CAACE,OAAO,CAACC,GAAT,EAAc;AACtCC,cAAAA,MAAM,EAAEF,OAAO,CAACE,MADsB;AAEtCC,cAAAA,OAAO,EAAEJ,MAAM,CAACI,OAFsB;AAGtCC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,OAAO,CAACI,IAAvB,CAHgC;AAItCG,cAAAA,OAAO,oBACAP,OAAO,CAACO,OADR;AAEH,gCAAgB,kBAFb;AAGH,iCAAiB,UAHd;AAIHC,gBAAAA,MAAM,EAAE,UAJL;AAKH,0DAAmCb,KAAK,CAACc,OAAzC;AALG;AAJ+B,aAAd,CADnB;;AAAA;AACHC,YAAAA,QADG;;AAcT;AACMC,YAAAA,UAfG,GAeU,SAAbA,UAAa,CAAAC,GAAG,EAAI;AACtB,qBAAOA,GAAG,CAACC,IAAJ,GAAWC,IAAX,CAAgB,UAAAD,IAAI,EAAI;AAC3B,uBAAOA,IAAI,GAAGR,IAAI,CAACU,KAAL,CAAWF,IAAX,CAAH,GAAsB,EAAjC;AACH,eAFM,CAAP;AAGH,aAnBQ;;AAAA,gBAqBJH,QAAQ,CAACM,EArBL;AAAA;AAAA;AAAA;;AAsBCC,YAAAA,IAtBD,GAsBQN,UAAU,CAACD,QAAD,CAtBlB;AAAA,kBAuBC;AAAEQ,cAAAA,MAAM,EAAER,QAAQ,CAACQ,MAAnB;AAA2BD,cAAAA,IAAI,EAAJA;AAA3B,aAvBD;;AAAA;AAAA,6CA0BFP,QAAQ,CAACO,IAAT,GAAgBH,IAAhB,CAAqB,UAAAK,IAAI,EAAI;AAChC;AACA,kBAAIC,6BAAqBV,QAAQ,CAACH,OAAT,CAAiBc,GAAjB,EAAzB,EAAiD;AAC7C,uBAAO;AACHH,kBAAAA,MAAM,EAAER,QAAQ,CAACQ,MADd;AAEHD,kBAAAA,IAAI,EAAEE,IAFH;AAGHZ,kBAAAA,OAAO,EAAE;AACL,sCAAkBG,QAAQ,CAACH,OAAT,CAAiBc,GAAjB,GAAuBD,yBAAvB,EAA0C,CAA1C,CADb;AAEL,mCAAeV,QAAQ,CAACH,OAAT,CAAiBc,GAAjB,GAAuBC,0BAAvB,EAA2C,CAA3C;AAFV;AAHN,iBAAP;AAQH;;AACD,qBAAO;AACHJ,gBAAAA,MAAM,EAAER,QAAQ,CAACQ,MADd;AAEHD,gBAAAA,IAAI,EAAEE;AAFH,eAAP;AAIH,aAhBM,CA1BE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAJtB,IAAI;AAAA;AAAA;AAAA,GAAV;;eA4CeA,I","sourcesContent":["/* eslint-disable no-throw-literal */\r\nimport { API_VERSION_HEADER, REQUEST_ID_HEADER } from '../config';\r\n\r\nconst pjson = require('../../package.json');\r\n\r\nconst http = async (fetch, config, request) => {\r\n    const response = await fetch(request.url, {\r\n        method: request.method,\r\n        timeout: config.timeout,\r\n        body: JSON.stringify(request.body),\r\n        headers: {\r\n            ...request.headers,\r\n            'Content-Type': 'application/json',\r\n            'Cache-Control': 'no-cache',\r\n            pragma: 'no-cache',\r\n            'user-agent': `checkout-sdk-node/${pjson.version}`\r\n        }\r\n    });\r\n\r\n    // For 'no body' response, replace with empty object\r\n    const bodyParser = rsp => {\r\n        return rsp.text().then(text => {\r\n            return text ? JSON.parse(text) : {};\r\n        });\r\n    };\r\n\r\n    if (!response.ok) {\r\n        const json = bodyParser(response);\r\n        throw { status: response.status, json };\r\n    }\r\n\r\n    return response.json().then(data => {\r\n        // Return CKO response headers when available\r\n        if (REQUEST_ID_HEADER in response.headers.raw()) {\r\n            return {\r\n                status: response.status,\r\n                json: data,\r\n                headers: {\r\n                    'cko-request-id': response.headers.raw()[REQUEST_ID_HEADER][0],\r\n                    'cko-version': response.headers.raw()[API_VERSION_HEADER][0]\r\n                }\r\n            };\r\n        }\r\n        return {\r\n            status: response.status,\r\n            json: data\r\n        };\r\n    });\r\n};\r\nexport default http;\r\n"],"file":"http.js"}